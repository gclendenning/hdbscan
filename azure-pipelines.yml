variables:
  triggeredByPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]

stages:
  - stage: BuildPublishArtifact
    jobs:
      # Need to use manylinux as ubuntu-latest is too new
      - job: Manylinux2014Build
        pool:
          vmImage: 'ubuntu-latest'
        container: quay.io/pypa/manylinux2014_x86_64:latest
        strategy:
          matrix:
            linux_py37:
              python.version: 'cp37-cp37'
            linux_py38:
              python.version: 'cp38-cp38'
            linux_py39:
              python.version: 'cp39-cp39'
            linux_py310:
              python.version: 'cp310-cp310'
        steps:
        - script: |
            "${PYBIN}/python" -m pip install --upgrade pip
            "${PYBIN}/python" -m pip install wheel
            "${PYBIN}/python" -m pip install -r requirements.txt
          displayName: 'Install dependencies and build tools'
          env:
            PYBIN: /opt/python/$(python.version)/bin
        - script: |
            "${PYBIN}/python" setup.py sdist bdist_wheel
          displayName: 'Build wheels'
          env:
            PYBIN: /opt/python/$(python.version)/bin
        - bash: |
            auditwheel repair dist/*linux_x86_64.whl --plat manylinux2014_x86_64 -w wheelhouse-manylinux/
            ls -l dist/
            ls -l wheelhouse-manylinux/
          displayName: 'Audit wheels'
        
        # - task: DownloadSecureFile@1
        #   name: PYPIRC_CONFIG
        #   displayName: 'Download pypirc'
        #   inputs:
        #     secureFile: 'pypirc'  
        
        # - bash: |
        #     "${PYBIN}/python" -m pip install twine
        #     "${PYBIN}/python" -m twine upload -r testpypi --config-file $(PYPIRC_CONFIG.secureFilePath) --skip-existing --disable-progress-bar wheelhouse-manylinux/*
        #     "${PYBIN}/python" -m twine upload -r testpypi --config-file $(PYPIRC_CONFIG.secureFilePath) --skip-existing --disable-progress-bar dist/*.tar.gz
        #   displayName: 'Publish wheel to PyPi'
        #   env:
        #     PYBIN: /opt/python/$(python.version)/bin

      - job: BuildWindowsAndMacOSArtifacts
        displayName: Build source dists and wheels for windows and macOS
        strategy:
          matrix:
            mac_py37:
              imageName: 'macOS-latest'
              python.version: '3.7'
            windows_py37:
              imageName: 'windows-latest'
              python.version: '3.7'            
            mac_py38:
              imageName: 'macOS-latest'
              python.version: '3.8'
            windows_py38:
              imageName: 'windows-latest'
              python.version: '3.8'
            mac_py39:
              imageName: 'macOS-latest'
              python.version: '3.9'
            windows_py39:
              imageName: 'windows-latest'
              python.version: '3.9'
            mac_py310:
              imageName: 'macOS-latest'
              python.version: '3.10'
            windows_py310:
              imageName: 'windows-latest'
              python.version: '3.10'

        pool:
          vmImage: $(imageName) 

        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'

        - script: |
            python -m pip install --upgrade pip
            pip install wheel
            pip install -r requirements.txt
          displayName: 'Install dependencies'

        - script: |
            pip install -e .
          displayName: 'Install package locally'
        
        - bash: |
            python setup.py sdist bdist_wheel
            ls dist/*
          displayName: 'Build package'

        - bash: |
            export PACKAGE_VERSION="$(python setup.py --version)"
            echo "Package Version: ${PACKAGE_VERSION}"
            echo "##vso[task.setvariable variable=packageVersionFormatted;]release-${PACKAGE_VERSION}"
          displayName: 'Get package version'

        - script: |
            echo "Version in git tag $(Build.SourceBranchName) does not match version derived from setup.py $(packageVersionFormatted)"
            exit 1
          displayName: Raise error if version doesnt match tag
          condition: and(succeeded(), ne(variables['Build.SourceBranchName'], variables['packageVersionFormatted']))

        # - task: DownloadSecureFile@1
        #   name: PYPIRC_CONFIG
        #   displayName: 'Download pypirc'
        #   inputs:
        #     secureFile: 'pypirc'  

        # - script: |
        #     pip install twine
        #     twine upload -r testpypi --config-file $(PYPIRC_CONFIG.secureFilePath) --skip-existing  dist/* 
        #   displayName: 'Upload to PyPI'
        #   condition: and(succeeded(), eq(variables['Build.SourceBranchName'], variables['packageVersionFormatted']))
